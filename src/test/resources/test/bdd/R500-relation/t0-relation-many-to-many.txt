# struct tests

FEATURE: relation-many-to-many
background:
 configure loadFKs = true
thenType: struct


# --- Optional ---
---
title: normal
given:
 type Customer struct {id int primaryKey, relation addr Address optional many } end
 type Address struct {id int primaryKey, relation cust Customer optional many } end

  insert Customer {id: 55 }
when:
  insert Address {id: 100, cust: 55 }
  let x = Customer[55].fks()
then:
value:a:Customer {
 vid:55
 vaddr:{100}
}

---
title: normal2
given:
 type Customer struct {id int primaryKey, relation addr Address optional many } end
 type Address struct {id int primaryKey, relation cust Customer optional many } end

  insert Customer {id: 55 }
when:
  insert Address {id: 100, cust: 55 }
  insert Address {id: 101, cust: 55 }
  let x = Customer[55].fks()
then:
value:a:Customer {
 vid:55
 vaddr:{[100,101]}
}

---
title: normal2x2
given:
 type Customer struct {id int primaryKey, relation addr Address optional many } end
 type Address struct {id int primaryKey, relation cust Customer optional many } end

  insert Customer {id: 55 }
  insert Customer {id: 57 }
when:
  insert Address {id: 100, cust: [55,57] }
  insert Address {id: 101, cust: [55,57] }
  let x = Customer[55].fks()
then:
value:a:Customer {
 vid:55
 vaddr:{[100,101]}
}

---
title: normal2x2a
given:
 type Customer struct {id int primaryKey, relation addr Address optional many } end
 type Address struct {id int primaryKey, relation cust Customer optional many } end

  insert Customer {id: 55 }
  insert Customer {id: 57 }
when:
  insert Address {id: 100, cust: [55,57] }
  insert Address {id: 101, cust: [55,57] }
  let x = Address[100].fks()
then:
value:a:Address {
 vid:100
 vcust:{[55,57]}
}

---
title: normal3x2a
given:
 type Customer struct {id int primaryKey, relation addr Address optional many } end
 type Address struct {id int primaryKey, relation cust Customer optional many } end

  insert Customer {id: 55 }
  insert Customer {id: 57 }
  insert Customer {id: 58 }
when:
  insert Address {id: 100, cust: [55,57,58] }
  insert Address {id: 101, cust: [55,57,58] }
  let x = Address[101].fks()
then:
value:a:Address {
 vid:101
 vcust:{[55,57,58]}
}

---
title: optional-missing
given:
 //note forward-ref
 type Customer struct {id int primaryKey, relation addr Address optional many } end
 type Address struct {id int primaryKey, relation cust Customer optional many } end

  insert Customer {id: 55 }
when:
  insert Address {id: 100 }
  let x = Customer[55].fks()
then:
value:a:Customer {
 vid:55
 vaddr:null
}

---
title: bad-ref
given:
 type Customer struct {id int primaryKey, relation addr Address optional many } end
 type Address struct {id int primaryKey, relation cust Customer optional many } end

  insert Customer {id: 55 }
when:
  insert Address {id: 100, cust: 44 }
  let x = Customer[55].fks()
then:
ERROR: rule-relationMany


# --- Child Mandatory ---
---
title: child-mandatory-normal
given:
 type Customer struct {id int primaryKey, relation addr Address optional many } end
 type Address struct {id int primaryKey, relation cust Customer many } end

  insert Customer {id: 55 }
when:
  insert Address {id: 100, cust: 55 }
  insert Address {id: 101, cust: 55 }
  let x = Customer[55].fks()
then:
value:a:Customer {
 vid:55
 vaddr:{[100,101]}
}

---
title: child-mandatory-missing
given:
 //note forward-ref
 type Customer struct {id int primaryKey, relation addr Address optional many } end
 type Address struct {id int primaryKey, relation cust Customer many } end

  insert Customer {id: 55 }
when:
  insert Address {id: 100 }
  let x = Customer[55].fks()
then:
ERROR: value-missing-for-non-optional-field

---
title: child-mandatory-bad-ref
given:
 type Customer struct {id int primaryKey, relation addr Address optional many } end
 type Address struct {id int primaryKey, relation cust Customer many } end

  insert Customer {id: 55 }
when:
  insert Address {id: 100, cust: 44 }
  let x = Customer[55].fks()
then:
ERROR: rule-relationMany


---
title: mandatory-normal-other-way
given:
 type Customer struct {id int primaryKey, relation addr Address many } end
 type Address struct {id int primaryKey, relation cust Customer optional many } end

  insert Address {id: 100 }
when:
  insert Customer {id: 55, addr: 100 }
  insert Customer {id: 56, addr: 100 }
  let x = Customer[55].fks()
then:
value:a:Customer {
 vid:55
 vaddr:{100}
}

#Note. we don't support one-side relations with N:M

