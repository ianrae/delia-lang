# self-join relations

FEATURE: self-join N to 1
background:
  type Customer struct {id int primaryKey, name string,
      relation manager Customer 'r1' one optional,
      relation workers Customer 'r1' many optional
  }  end
  insert Customer {id: 55, name: 'art' }
thenType: struct

---
title: basic
given:
when:
  let x = Customer[55]
then:
value:a:Customer {
 vid:55
 vname:'art'
 vmanager:null
 vworkers:null
}

---
SKIP: add worker,fks. TODO: implement this
# workers is the parent side. would have to implement as an INSERT then an UPDATE
# think of Customer and Address. we would have to
#  insert Customer 55 ...
#  update Address 100 and set cust=55
given:
  insert Customer {id: 56, name: 'bob', workers: 55 }
when:
  let x = Customer[true].fks().orderBy('id')
then:
value:a:Customer {
 vid:55
 vname:'art'
  vmanager:{56}
  vworkers:null
}
value:a:Customer {
 vid:56
 vname:'bob'
 vmanager:null
  vworkers:{55}
}

---
SKIP: add worker (see above)
given:
  insert Customer {id: 56, name: 'bob', workers: 55 }
when:
  let x = Customer[true].orderBy('id')
then:
value:a:Customer {
 vid:55
 vname:'art'
 vmanager:{56}
vworkers:null
}
value:a:Customer {
 vid:56
 vname:'bob'
 vmanager:null
  vworkers:null
}

---
title: add manager
given:
  insert Customer {id: 56, name: 'bob', manager: 55 }
when:
  let x = Customer[true].orderBy('id')
then:
value:a:Customer {
 vid:55
 vname:'art'
 vmanager:null
 vworkers:null
}
value:a:Customer {
 vid:56
 vname:'bob'
 vmanager:{55}
vworkers:null
}