

t1() ::= <<
import java.util.HashMap;
import java.util.Map;
import org.delia.type.DStructHelper;
import org.delia.type.DValue;

>>


t2(cname,iname,ename,immutname) ::= <<
  public class <cname> implements <iname>,<ename> {
    private DValue dval;
    private DStructHelper helper;
    private Map\<String,Object> setMap = new HashMap\<>();

    public <cname>() {
    }
    public <cname>(DValue dval) {
      this.dval = dval;
      this.helper = dval.asStruct();
    }
    public <cname>(<iname> immut) {
      <immutname> x = (<immutname>) immut;
      this.dval = x.internalDValue();
      this.helper = dval.asStruct();
    }

    @Override
    public DValue internalDValue() {
      return dval; //can be null, if disconnected entity
    }
    @Override
    public Map\<String, Object> internalSetValueMap() {
      return setMap;
    }

>>

t3(ftype,fobjname,uname,fname,asname,nullval) ::= <<
    @Override
    public <ftype> get<uname>() {
      String fieldName = "<fname>";
      if (setMap.containsKey(fieldName)) {
        return (<fobjname>)setMap.get(fieldName); //can return null
      }
      if (helper == null) return <nullval>;
      return helper.getField(fieldName).<asname>();
    }
    @Override
    public void set<uname>(<ftype> val) {
      setMap.put("<fname>", val);
    }
    
>>

t4(ftype,fobjname,uname,fname,nullval) ::= <<
    @Override
    public <ftype> get<uname>() {
      String fieldName = "<fname>";
      if (setMap.containsKey(fieldName)) {
        return (<fobjname>)setMap.get(fieldName); //can return null
      }
      
      if (helper == null) return <nullval>;
      DValue inner = helper.getField("<fname>");
      <ftype> immut = new <ftype>Immut(inner);
      return immut;
    }
    @Override
    public void set<uname>(<ftype> val) {
      setMap.put("<fname>", val);
    }
    
>>

