
t1() ::= <<
import org.delia.type.DStructHelper;
import org.delia.type.DValue;
import org.delia.type.DRelation;

>>

t2(cname,iname) ::= <<
public class <cname> implements <iname> {
  protected DValue dval;
  protected DStructHelper helper;

  public <cname>(DValue dval) {
    this.dval = dval;
    this.helper = dval.asStruct();
  }
  @Override
  public DValue internalDValue() {
    return dval;
  }

>>

t2base(cname,base,iname) ::= <<
public class <cname> extends <base>Immut implements <iname> {

  public <cname>(DValue dval) {
    super(dval);
  }

>>

t3(ftype,uname,fname,asname) ::= <<
  @Override
  public <ftype> get<uname>() {
    return helper.getField("<fname>").<asname>();
  }
>>

t4(ftype,uname,fname) ::= <<
  @Override
  public <ftype> get<uname>() {
	DValue inner = helper.getField("<fname>");
	if (inner == null) return null;
	DRelation drel =  inner.asRelation();
	if (drel.haveFetched()) {
		DValue fetched = drel.getFetchedItems().get(0);
		<ftype> immut = new <ftype>Immut(fetched);
		return immut;
	} else {
		return null;
	}
  }
>>

t5(ftype,uname,fname,pktype,asname) ::= <<
  @Override
  public <pktype> get<uname>PK() {
    DValue inner = helper.getField("<fname>");
    if (inner == null) return 0;
    DRelation drel =  inner.asRelation();
    DValue fk = drel.getForeignKey();
    return fk.<asname>();
  }
>>

t4list(ftype,listftype,uname,fname) ::= <<
  @Override
  public <listftype> get<uname>() {
	DValue inner = helper.getField("<fname>");
	if (inner == null) return null;
	DRelation drel =  inner.asRelation();
	if (drel.haveFetched()) {
	    <listftype> list = new ArrayList\<>();
	    for(DValue fetched: drel.getFetchedItems()) {
			<ftype> immut = new <ftype>Immut(fetched);
			list.add(immut);
		}
		return list; //hey
	} else {
		return null;
	}
  }
>>

t5list(ftype,listpktype,uname,fname,pktype,asname) ::= <<
  @Override
  public <listpktype> get<uname>PK() {
    DValue inner = helper.getField("<fname>");
    if (inner == null) return 0;
    DRelation drel =  inner.asRelation();
    
    <listpktype> list = new ArrayList\<>();
    for(DValue fk: drel.getMultipleKeys()) {
		<pktype> x = fk.<asname>();
		list.add(x);
	}
	return list; //heyx
  }
>>
