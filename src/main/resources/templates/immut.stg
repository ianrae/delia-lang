
t1() ::= <<
import org.delia.type.DStructHelper;
import org.delia.type.DValue;

>>

t2(cname,iname) ::= <<
public class <cname> implements <iname> {
  private DValue dval;
  private DStructHelper helper;

  public <cname>(DValue dval) {
    this.dval = dval;
    this.helper = dval.asStruct();
  }
  @Override
  public DValue internalDValue() {
    return dval;
  }

>>

t3(ftype,uname,fname,asname) ::= <<
  @Override
  public <ftype> get<uname>() {
    return helper.getField("<fname>").<asname>();
  }
>>

t4(ftype,uname,fname) ::= <<
  @Override
  public <ftype> get<uname>() {
	DValue inner = helper.getField("<fname>");
	if (inner == null) return null;
	DRelation drel =  inner.asRelation();
	if (drel.haveFetched()) {
		DValue fetched = drel.getFetchedItems().get(0);
		<ftype> immut = new <ftype>Immut(fetched);
		return immut;
	} else {
		return null;
	}
  }
>>

t5(ftype,uname,fname,pktype,asname) ::= <<
  @Override
  public <pktype> get<uname>PK() {
    DValue inner = helper.getField("<fname>");
    if (inner == null) return 0;
    DRelation drel =  inner.asRelation();
    DValue fk = drel.getForeignKey();
    return fk.<asname>();
  }
>>

