
t1() ::= <<
import java.util.HashMap;
import java.util.Map;
import org.delia.type.DStructHelper;
import org.delia.type.DValue;
import org.delia.codegen.DeliaImmutable;

>>

t2(cname,iname) ::= <<
public static class <cname> implements <iname> {
  private DValue dval;
  private DStructHelper helper;

  public <cname>(DValue dval) {
    this.dval = dval;
    this.helper = dval.asStruct();
  }
  @Override
  public DValue internalDValue() {
    return dval;
  }

>>

t3(ftype,uname,fname,asname) ::= <<
  @Override
  public <ftype> get<uname>() {
    return helper.getField("<fname>").<asname>();
  }
>>

t4(ftype,uname,fname) ::= <<
  @Override
  public <ftype> get<uname>() {
    DValue inner = helper.getField("<fname>");
    <ftype> inner = new <ftype>Immut(inner);
    return inner;
  }
>>
